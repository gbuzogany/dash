// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dash.proto

#include "dash.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace dash {
class DashDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DashData> _instance;
} _DashData_default_instance_;
class DashExtendedDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DashExtendedData> _instance;
} _DashExtendedData_default_instance_;
class DashStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DashStatusResponse> _instance;
} _DashStatusResponse_default_instance_;
}  // namespace dash
static void InitDefaultsscc_info_DashData_dash_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dash::_DashData_default_instance_;
    new (ptr) ::dash::DashData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dash::DashData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DashData_dash_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DashData_dash_2eproto}, {}};

static void InitDefaultsscc_info_DashExtendedData_dash_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dash::_DashExtendedData_default_instance_;
    new (ptr) ::dash::DashExtendedData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dash::DashExtendedData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DashExtendedData_dash_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DashExtendedData_dash_2eproto}, {}};

static void InitDefaultsscc_info_DashStatusResponse_dash_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dash::_DashStatusResponse_default_instance_;
    new (ptr) ::dash::DashStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dash::DashStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DashStatusResponse_dash_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DashStatusResponse_dash_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dash_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dash_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dash_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dash_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dash::DashData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dash::DashData, speed_),
  PROTOBUF_FIELD_OFFSET(::dash::DashData, rpm_),
  PROTOBUF_FIELD_OFFSET(::dash::DashData, gear_),
  PROTOBUF_FIELD_OFFSET(::dash::DashData, neutral_),
  PROTOBUF_FIELD_OFFSET(::dash::DashData, clutch_),
  PROTOBUF_FIELD_OFFSET(::dash::DashData, enginerunning_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dash::DashExtendedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dash::DashExtendedData, batteryvoltage_),
  PROTOBUF_FIELD_OFFSET(::dash::DashExtendedData, coolanttemperature_),
  PROTOBUF_FIELD_OFFSET(::dash::DashExtendedData, airintaketemperature_),
  PROTOBUF_FIELD_OFFSET(::dash::DashExtendedData, manifoldpressure_),
  PROTOBUF_FIELD_OFFSET(::dash::DashExtendedData, throttlepositionsensor_),
  PROTOBUF_FIELD_OFFSET(::dash::DashExtendedData, injectorduration_),
  PROTOBUF_FIELD_OFFSET(::dash::DashExtendedData, ignitionadvance_),
  PROTOBUF_FIELD_OFFSET(::dash::DashExtendedData, kickstand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dash::DashStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dash::DashStatusResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dash::DashData)},
  { 11, -1, sizeof(::dash::DashExtendedData)},
  { 24, -1, sizeof(::dash::DashStatusResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dash::_DashData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dash::_DashExtendedData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dash::_DashStatusResponse_default_instance_),
};

const char descriptor_table_protodef_dash_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndash.proto\022\004dash\"l\n\010DashData\022\r\n\005speed\030"
  "\001 \001(\002\022\013\n\003rpm\030\002 \001(\005\022\014\n\004gear\030\003 \001(\005\022\017\n\007neut"
  "ral\030\004 \001(\010\022\016\n\006clutch\030\005 \001(\010\022\025\n\rengineRunni"
  "ng\030\006 \001(\010\"\344\001\n\020DashExtendedData\022\026\n\016battery"
  "Voltage\030\001 \001(\002\022\032\n\022coolantTemperature\030\002 \001("
  "\002\022\034\n\024airIntakeTemperature\030\003 \001(\002\022\030\n\020manif"
  "oldPressure\030\004 \001(\002\022\036\n\026throttlePositionSen"
  "sor\030\005 \001(\002\022\030\n\020injectorDuration\030\006 \001(\002\022\027\n\017i"
  "gnitionAdvance\030\007 \001(\002\022\021\n\tkickstand\030\010 \001(\010\""
  "$\n\022DashStatusResponse\022\016\n\006status\030\001 \001(\0052\231\001"
  "\n\013DashControl\022<\n\016UpdateDashData\022\016.dash.D"
  "ashData\032\030.dash.DashStatusResponse\"\000\022L\n\026U"
  "pdateDashExtendedData\022\026.dash.DashExtende"
  "dData\032\030.dash.DashStatusResponse\"\000b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dash_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dash_2eproto_sccs[3] = {
  &scc_info_DashData_dash_2eproto.base,
  &scc_info_DashExtendedData_dash_2eproto.base,
  &scc_info_DashStatusResponse_dash_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dash_2eproto_once;
static bool descriptor_table_dash_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dash_2eproto = {
  &descriptor_table_dash_2eproto_initialized, descriptor_table_protodef_dash_2eproto, "dash.proto", 561,
  &descriptor_table_dash_2eproto_once, descriptor_table_dash_2eproto_sccs, descriptor_table_dash_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_dash_2eproto::offsets,
  file_level_metadata_dash_2eproto, 3, file_level_enum_descriptors_dash_2eproto, file_level_service_descriptors_dash_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dash_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dash_2eproto), true);
namespace dash {

// ===================================================================

void DashData::InitAsDefaultInstance() {
}
class DashData::_Internal {
 public:
};

DashData::DashData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dash.DashData)
}
DashData::DashData(const DashData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&enginerunning_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(enginerunning_));
  // @@protoc_insertion_point(copy_constructor:dash.DashData)
}

void DashData::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enginerunning_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(enginerunning_));
}

DashData::~DashData() {
  // @@protoc_insertion_point(destructor:dash.DashData)
  SharedDtor();
}

void DashData::SharedDtor() {
}

void DashData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DashData& DashData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DashData_dash_2eproto.base);
  return *internal_default_instance();
}


void DashData::Clear() {
// @@protoc_insertion_point(message_clear_start:dash.DashData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enginerunning_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(enginerunning_));
  _internal_metadata_.Clear();
}

const char* DashData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 rpm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gear = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool neutral = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          neutral_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool clutch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          clutch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineRunning = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          enginerunning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DashData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dash.DashData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speed = 1;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speed(), target);
  }

  // int32 rpm = 2;
  if (this->rpm() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rpm(), target);
  }

  // int32 gear = 3;
  if (this->gear() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gear(), target);
  }

  // bool neutral = 4;
  if (this->neutral() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_neutral(), target);
  }

  // bool clutch = 5;
  if (this->clutch() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_clutch(), target);
  }

  // bool engineRunning = 6;
  if (this->enginerunning() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enginerunning(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dash.DashData)
  return target;
}

size_t DashData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dash.DashData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float speed = 1;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 rpm = 2;
  if (this->rpm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rpm());
  }

  // int32 gear = 3;
  if (this->gear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gear());
  }

  // bool neutral = 4;
  if (this->neutral() != 0) {
    total_size += 1 + 1;
  }

  // bool clutch = 5;
  if (this->clutch() != 0) {
    total_size += 1 + 1;
  }

  // bool engineRunning = 6;
  if (this->enginerunning() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DashData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dash.DashData)
  GOOGLE_DCHECK_NE(&from, this);
  const DashData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DashData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dash.DashData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dash.DashData)
    MergeFrom(*source);
  }
}

void DashData::MergeFrom(const DashData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dash.DashData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.rpm() != 0) {
    _internal_set_rpm(from._internal_rpm());
  }
  if (from.gear() != 0) {
    _internal_set_gear(from._internal_gear());
  }
  if (from.neutral() != 0) {
    _internal_set_neutral(from._internal_neutral());
  }
  if (from.clutch() != 0) {
    _internal_set_clutch(from._internal_clutch());
  }
  if (from.enginerunning() != 0) {
    _internal_set_enginerunning(from._internal_enginerunning());
  }
}

void DashData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dash.DashData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DashData::CopyFrom(const DashData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dash.DashData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DashData::IsInitialized() const {
  return true;
}

void DashData::InternalSwap(DashData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(speed_, other->speed_);
  swap(rpm_, other->rpm_);
  swap(gear_, other->gear_);
  swap(neutral_, other->neutral_);
  swap(clutch_, other->clutch_);
  swap(enginerunning_, other->enginerunning_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DashData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DashExtendedData::InitAsDefaultInstance() {
}
class DashExtendedData::_Internal {
 public:
};

DashExtendedData::DashExtendedData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dash.DashExtendedData)
}
DashExtendedData::DashExtendedData(const DashExtendedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&batteryvoltage_, &from.batteryvoltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&kickstand_) -
    reinterpret_cast<char*>(&batteryvoltage_)) + sizeof(kickstand_));
  // @@protoc_insertion_point(copy_constructor:dash.DashExtendedData)
}

void DashExtendedData::SharedCtor() {
  ::memset(&batteryvoltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kickstand_) -
      reinterpret_cast<char*>(&batteryvoltage_)) + sizeof(kickstand_));
}

DashExtendedData::~DashExtendedData() {
  // @@protoc_insertion_point(destructor:dash.DashExtendedData)
  SharedDtor();
}

void DashExtendedData::SharedDtor() {
}

void DashExtendedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DashExtendedData& DashExtendedData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DashExtendedData_dash_2eproto.base);
  return *internal_default_instance();
}


void DashExtendedData::Clear() {
// @@protoc_insertion_point(message_clear_start:dash.DashExtendedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&batteryvoltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kickstand_) -
      reinterpret_cast<char*>(&batteryvoltage_)) + sizeof(kickstand_));
  _internal_metadata_.Clear();
}

const char* DashExtendedData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float batteryVoltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          batteryvoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float coolantTemperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          coolanttemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float airIntakeTemperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          airintaketemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float manifoldPressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          manifoldpressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float throttlePositionSensor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          throttlepositionsensor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float injectorDuration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          injectorduration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ignitionAdvance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ignitionadvance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool kickstand = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          kickstand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DashExtendedData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dash.DashExtendedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float batteryVoltage = 1;
  if (!(this->batteryvoltage() <= 0 && this->batteryvoltage() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_batteryvoltage(), target);
  }

  // float coolantTemperature = 2;
  if (!(this->coolanttemperature() <= 0 && this->coolanttemperature() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_coolanttemperature(), target);
  }

  // float airIntakeTemperature = 3;
  if (!(this->airintaketemperature() <= 0 && this->airintaketemperature() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_airintaketemperature(), target);
  }

  // float manifoldPressure = 4;
  if (!(this->manifoldpressure() <= 0 && this->manifoldpressure() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_manifoldpressure(), target);
  }

  // float throttlePositionSensor = 5;
  if (!(this->throttlepositionsensor() <= 0 && this->throttlepositionsensor() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_throttlepositionsensor(), target);
  }

  // float injectorDuration = 6;
  if (!(this->injectorduration() <= 0 && this->injectorduration() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_injectorduration(), target);
  }

  // float ignitionAdvance = 7;
  if (!(this->ignitionadvance() <= 0 && this->ignitionadvance() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_ignitionadvance(), target);
  }

  // bool kickstand = 8;
  if (this->kickstand() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_kickstand(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dash.DashExtendedData)
  return target;
}

size_t DashExtendedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dash.DashExtendedData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float batteryVoltage = 1;
  if (!(this->batteryvoltage() <= 0 && this->batteryvoltage() >= 0)) {
    total_size += 1 + 4;
  }

  // float coolantTemperature = 2;
  if (!(this->coolanttemperature() <= 0 && this->coolanttemperature() >= 0)) {
    total_size += 1 + 4;
  }

  // float airIntakeTemperature = 3;
  if (!(this->airintaketemperature() <= 0 && this->airintaketemperature() >= 0)) {
    total_size += 1 + 4;
  }

  // float manifoldPressure = 4;
  if (!(this->manifoldpressure() <= 0 && this->manifoldpressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float throttlePositionSensor = 5;
  if (!(this->throttlepositionsensor() <= 0 && this->throttlepositionsensor() >= 0)) {
    total_size += 1 + 4;
  }

  // float injectorDuration = 6;
  if (!(this->injectorduration() <= 0 && this->injectorduration() >= 0)) {
    total_size += 1 + 4;
  }

  // float ignitionAdvance = 7;
  if (!(this->ignitionadvance() <= 0 && this->ignitionadvance() >= 0)) {
    total_size += 1 + 4;
  }

  // bool kickstand = 8;
  if (this->kickstand() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DashExtendedData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dash.DashExtendedData)
  GOOGLE_DCHECK_NE(&from, this);
  const DashExtendedData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DashExtendedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dash.DashExtendedData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dash.DashExtendedData)
    MergeFrom(*source);
  }
}

void DashExtendedData::MergeFrom(const DashExtendedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dash.DashExtendedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.batteryvoltage() <= 0 && from.batteryvoltage() >= 0)) {
    _internal_set_batteryvoltage(from._internal_batteryvoltage());
  }
  if (!(from.coolanttemperature() <= 0 && from.coolanttemperature() >= 0)) {
    _internal_set_coolanttemperature(from._internal_coolanttemperature());
  }
  if (!(from.airintaketemperature() <= 0 && from.airintaketemperature() >= 0)) {
    _internal_set_airintaketemperature(from._internal_airintaketemperature());
  }
  if (!(from.manifoldpressure() <= 0 && from.manifoldpressure() >= 0)) {
    _internal_set_manifoldpressure(from._internal_manifoldpressure());
  }
  if (!(from.throttlepositionsensor() <= 0 && from.throttlepositionsensor() >= 0)) {
    _internal_set_throttlepositionsensor(from._internal_throttlepositionsensor());
  }
  if (!(from.injectorduration() <= 0 && from.injectorduration() >= 0)) {
    _internal_set_injectorduration(from._internal_injectorduration());
  }
  if (!(from.ignitionadvance() <= 0 && from.ignitionadvance() >= 0)) {
    _internal_set_ignitionadvance(from._internal_ignitionadvance());
  }
  if (from.kickstand() != 0) {
    _internal_set_kickstand(from._internal_kickstand());
  }
}

void DashExtendedData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dash.DashExtendedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DashExtendedData::CopyFrom(const DashExtendedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dash.DashExtendedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DashExtendedData::IsInitialized() const {
  return true;
}

void DashExtendedData::InternalSwap(DashExtendedData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(batteryvoltage_, other->batteryvoltage_);
  swap(coolanttemperature_, other->coolanttemperature_);
  swap(airintaketemperature_, other->airintaketemperature_);
  swap(manifoldpressure_, other->manifoldpressure_);
  swap(throttlepositionsensor_, other->throttlepositionsensor_);
  swap(injectorduration_, other->injectorduration_);
  swap(ignitionadvance_, other->ignitionadvance_);
  swap(kickstand_, other->kickstand_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DashExtendedData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DashStatusResponse::InitAsDefaultInstance() {
}
class DashStatusResponse::_Internal {
 public:
};

DashStatusResponse::DashStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dash.DashStatusResponse)
}
DashStatusResponse::DashStatusResponse(const DashStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:dash.DashStatusResponse)
}

void DashStatusResponse::SharedCtor() {
  status_ = 0;
}

DashStatusResponse::~DashStatusResponse() {
  // @@protoc_insertion_point(destructor:dash.DashStatusResponse)
  SharedDtor();
}

void DashStatusResponse::SharedDtor() {
}

void DashStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DashStatusResponse& DashStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DashStatusResponse_dash_2eproto.base);
  return *internal_default_instance();
}


void DashStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dash.DashStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* DashStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DashStatusResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dash.DashStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dash.DashStatusResponse)
  return target;
}

size_t DashStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dash.DashStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DashStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dash.DashStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DashStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DashStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dash.DashStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dash.DashStatusResponse)
    MergeFrom(*source);
  }
}

void DashStatusResponse::MergeFrom(const DashStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dash.DashStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DashStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dash.DashStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DashStatusResponse::CopyFrom(const DashStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dash.DashStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DashStatusResponse::IsInitialized() const {
  return true;
}

void DashStatusResponse::InternalSwap(DashStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DashStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dash
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dash::DashData* Arena::CreateMaybeMessage< ::dash::DashData >(Arena* arena) {
  return Arena::CreateInternal< ::dash::DashData >(arena);
}
template<> PROTOBUF_NOINLINE ::dash::DashExtendedData* Arena::CreateMaybeMessage< ::dash::DashExtendedData >(Arena* arena) {
  return Arena::CreateInternal< ::dash::DashExtendedData >(arena);
}
template<> PROTOBUF_NOINLINE ::dash::DashStatusResponse* Arena::CreateMaybeMessage< ::dash::DashStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dash::DashStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
