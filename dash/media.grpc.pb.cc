// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: media.proto

#include "media.pb.h"
#include "media.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mediaplayer {

static const char* MediaPlayer_method_names[] = {
  "/mediaplayer.MediaPlayer/PlayStatusChanged",
  "/mediaplayer.MediaPlayer/MediaChanged",
};

std::unique_ptr< MediaPlayer::Stub> MediaPlayer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MediaPlayer::Stub> stub(new MediaPlayer::Stub(channel));
  return stub;
}

MediaPlayer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PlayStatusChanged_(MediaPlayer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MediaChanged_(MediaPlayer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MediaPlayer::Stub::PlayStatusChanged(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::mediaplayer::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PlayStatusChanged_, context, request, response);
}

void MediaPlayer::Stub::experimental_async::PlayStatusChanged(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayStatusChanged_, context, request, response, std::move(f));
}

void MediaPlayer::Stub::experimental_async::PlayStatusChanged(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayStatusChanged_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>* MediaPlayer::Stub::AsyncPlayStatusChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mediaplayer::StatusResponse>::Create(channel_.get(), cq, rpcmethod_PlayStatusChanged_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>* MediaPlayer::Stub::PrepareAsyncPlayStatusChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mediaplayer::StatusResponse>::Create(channel_.get(), cq, rpcmethod_PlayStatusChanged_, context, request, false);
}

::grpc::Status MediaPlayer::Stub::MediaChanged(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::mediaplayer::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MediaChanged_, context, request, response);
}

void MediaPlayer::Stub::experimental_async::MediaChanged(::grpc::ClientContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MediaChanged_, context, request, response, std::move(f));
}

void MediaPlayer::Stub::experimental_async::MediaChanged(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MediaChanged_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>* MediaPlayer::Stub::AsyncMediaChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mediaplayer::StatusResponse>::Create(channel_.get(), cq, rpcmethod_MediaChanged_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>* MediaPlayer::Stub::PrepareAsyncMediaChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mediaplayer::StatusResponse>::Create(channel_.get(), cq, rpcmethod_MediaChanged_, context, request, false);
}

MediaPlayer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaPlayer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaPlayer::Service, ::mediaplayer::PlayStatus, ::mediaplayer::StatusResponse>(
          std::mem_fn(&MediaPlayer::Service::PlayStatusChanged), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaPlayer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaPlayer::Service, ::mediaplayer::MediaItem, ::mediaplayer::StatusResponse>(
          std::mem_fn(&MediaPlayer::Service::MediaChanged), this)));
}

MediaPlayer::Service::~Service() {
}

::grpc::Status MediaPlayer::Service::PlayStatusChanged(::grpc::ServerContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaPlayer::Service::MediaChanged(::grpc::ServerContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mediaplayer

