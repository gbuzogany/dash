// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dash.proto

#include "dash.pb.h"
#include "dash.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dash {

static const char* DashControl_method_names[] = {
  "/dash.DashControl/UpdateDashData",
  "/dash.DashControl/UpdateDashExtendedData",
};

std::unique_ptr< DashControl::Stub> DashControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DashControl::Stub> stub(new DashControl::Stub(channel));
  return stub;
}

DashControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UpdateDashData_(DashControl_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDashExtendedData_(DashControl_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DashControl::Stub::UpdateDashData(::grpc::ClientContext* context, const ::dash::DashData& request, ::dash::DashStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateDashData_, context, request, response);
}

void DashControl::Stub::experimental_async::UpdateDashData(::grpc::ClientContext* context, const ::dash::DashData* request, ::dash::DashStatusResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateDashData_, context, request, response, std::move(f));
}

void DashControl::Stub::experimental_async::UpdateDashData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::DashStatusResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateDashData_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dash::DashStatusResponse>* DashControl::Stub::AsyncUpdateDashDataRaw(::grpc::ClientContext* context, const ::dash::DashData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dash::DashStatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateDashData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dash::DashStatusResponse>* DashControl::Stub::PrepareAsyncUpdateDashDataRaw(::grpc::ClientContext* context, const ::dash::DashData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dash::DashStatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateDashData_, context, request, false);
}

::grpc::Status DashControl::Stub::UpdateDashExtendedData(::grpc::ClientContext* context, const ::dash::DashExtendedData& request, ::dash::DashStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateDashExtendedData_, context, request, response);
}

void DashControl::Stub::experimental_async::UpdateDashExtendedData(::grpc::ClientContext* context, const ::dash::DashExtendedData* request, ::dash::DashStatusResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateDashExtendedData_, context, request, response, std::move(f));
}

void DashControl::Stub::experimental_async::UpdateDashExtendedData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::DashStatusResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateDashExtendedData_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dash::DashStatusResponse>* DashControl::Stub::AsyncUpdateDashExtendedDataRaw(::grpc::ClientContext* context, const ::dash::DashExtendedData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dash::DashStatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateDashExtendedData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dash::DashStatusResponse>* DashControl::Stub::PrepareAsyncUpdateDashExtendedDataRaw(::grpc::ClientContext* context, const ::dash::DashExtendedData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dash::DashStatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateDashExtendedData_, context, request, false);
}

DashControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashControl::Service, ::dash::DashData, ::dash::DashStatusResponse>(
          std::mem_fn(&DashControl::Service::UpdateDashData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashControl_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashControl::Service, ::dash::DashExtendedData, ::dash::DashStatusResponse>(
          std::mem_fn(&DashControl::Service::UpdateDashExtendedData), this)));
}

DashControl::Service::~Service() {
}

::grpc::Status DashControl::Service::UpdateDashData(::grpc::ServerContext* context, const ::dash::DashData* request, ::dash::DashStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashControl::Service::UpdateDashExtendedData(::grpc::ServerContext* context, const ::dash::DashExtendedData* request, ::dash::DashStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dash

