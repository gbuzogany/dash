// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dash.proto
#ifndef GRPC_dash_2eproto__INCLUDED
#define GRPC_dash_2eproto__INCLUDED

#include "dash.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace dash {

class DashService final {
 public:
  static constexpr char const* service_full_name() {
    return "dash.DashService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue& request, ::dash::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>> AsyncUpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>>(AsyncUpdateDashIntDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>> PrepareAsyncUpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>>(PrepareAsyncUpdateDashIntDataRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue& request, ::dash::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>> AsyncUpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>>(AsyncUpdateDashFloatDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>> PrepareAsyncUpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>>(PrepareAsyncUpdateDashFloatDataRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue& request, ::dash::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>> AsyncUpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>>(AsyncUpdateDashStringDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>> PrepareAsyncUpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>>(PrepareAsyncUpdateDashStringDataRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue& request, ::dash::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>> AsyncUpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>>(AsyncUpdateDashBytesDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>> PrepareAsyncUpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>>(PrepareAsyncUpdateDashBytesDataRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void UpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDashIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateDashIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateDashIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDashFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateDashFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateDashFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDashStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateDashStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateDashStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDashBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateDashBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateDashBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>* AsyncUpdateDashIntDataRaw(::grpc::ClientContext* context, const ::dash::IntValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>* PrepareAsyncUpdateDashIntDataRaw(::grpc::ClientContext* context, const ::dash::IntValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>* AsyncUpdateDashFloatDataRaw(::grpc::ClientContext* context, const ::dash::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>* PrepareAsyncUpdateDashFloatDataRaw(::grpc::ClientContext* context, const ::dash::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>* AsyncUpdateDashStringDataRaw(::grpc::ClientContext* context, const ::dash::StringValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>* PrepareAsyncUpdateDashStringDataRaw(::grpc::ClientContext* context, const ::dash::StringValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>* AsyncUpdateDashBytesDataRaw(::grpc::ClientContext* context, const ::dash::BytesValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dash::StatusResponse>* PrepareAsyncUpdateDashBytesDataRaw(::grpc::ClientContext* context, const ::dash::BytesValue& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status UpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue& request, ::dash::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>> AsyncUpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>>(AsyncUpdateDashIntDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>> PrepareAsyncUpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>>(PrepareAsyncUpdateDashIntDataRaw(context, request, cq));
    }
    ::grpc::Status UpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue& request, ::dash::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>> AsyncUpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>>(AsyncUpdateDashFloatDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>> PrepareAsyncUpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>>(PrepareAsyncUpdateDashFloatDataRaw(context, request, cq));
    }
    ::grpc::Status UpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue& request, ::dash::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>> AsyncUpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>>(AsyncUpdateDashStringDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>> PrepareAsyncUpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>>(PrepareAsyncUpdateDashStringDataRaw(context, request, cq));
    }
    ::grpc::Status UpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue& request, ::dash::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>> AsyncUpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>>(AsyncUpdateDashBytesDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>> PrepareAsyncUpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>>(PrepareAsyncUpdateDashBytesDataRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void UpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateDashIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateDashIntData(::grpc::ClientContext* context, const ::dash::IntValue* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateDashIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateDashIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateDashFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateDashFloatData(::grpc::ClientContext* context, const ::dash::FloatValue* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateDashFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateDashFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateDashStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateDashStringData(::grpc::ClientContext* context, const ::dash::StringValue* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateDashStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateDashStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateDashBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateDashBytesData(::grpc::ClientContext* context, const ::dash::BytesValue* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateDashBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateDashBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dash::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>* AsyncUpdateDashIntDataRaw(::grpc::ClientContext* context, const ::dash::IntValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>* PrepareAsyncUpdateDashIntDataRaw(::grpc::ClientContext* context, const ::dash::IntValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>* AsyncUpdateDashFloatDataRaw(::grpc::ClientContext* context, const ::dash::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>* PrepareAsyncUpdateDashFloatDataRaw(::grpc::ClientContext* context, const ::dash::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>* AsyncUpdateDashStringDataRaw(::grpc::ClientContext* context, const ::dash::StringValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>* PrepareAsyncUpdateDashStringDataRaw(::grpc::ClientContext* context, const ::dash::StringValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>* AsyncUpdateDashBytesDataRaw(::grpc::ClientContext* context, const ::dash::BytesValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dash::StatusResponse>* PrepareAsyncUpdateDashBytesDataRaw(::grpc::ClientContext* context, const ::dash::BytesValue& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDashIntData_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDashFloatData_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDashStringData_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDashBytesData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UpdateDashIntData(::grpc::ServerContext* context, const ::dash::IntValue* request, ::dash::StatusResponse* response);
    virtual ::grpc::Status UpdateDashFloatData(::grpc::ServerContext* context, const ::dash::FloatValue* request, ::dash::StatusResponse* response);
    virtual ::grpc::Status UpdateDashStringData(::grpc::ServerContext* context, const ::dash::StringValue* request, ::dash::StatusResponse* response);
    virtual ::grpc::Status UpdateDashBytesData(::grpc::ServerContext* context, const ::dash::BytesValue* request, ::dash::StatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDashIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDashIntData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UpdateDashIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashIntData(::grpc::ServerContext* /*context*/, const ::dash::IntValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDashIntData(::grpc::ServerContext* context, ::dash::IntValue* request, ::grpc::ServerAsyncResponseWriter< ::dash::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDashFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDashFloatData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateDashFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashFloatData(::grpc::ServerContext* /*context*/, const ::dash::FloatValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDashFloatData(::grpc::ServerContext* context, ::dash::FloatValue* request, ::grpc::ServerAsyncResponseWriter< ::dash::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDashStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDashStringData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateDashStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashStringData(::grpc::ServerContext* /*context*/, const ::dash::StringValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDashStringData(::grpc::ServerContext* context, ::dash::StringValue* request, ::grpc::ServerAsyncResponseWriter< ::dash::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDashBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDashBytesData() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateDashBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashBytesData(::grpc::ServerContext* /*context*/, const ::dash::BytesValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDashBytesData(::grpc::ServerContext* context, ::dash::BytesValue* request, ::grpc::ServerAsyncResponseWriter< ::dash::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UpdateDashIntData<WithAsyncMethod_UpdateDashFloatData<WithAsyncMethod_UpdateDashStringData<WithAsyncMethod_UpdateDashBytesData<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateDashIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateDashIntData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dash::IntValue, ::dash::StatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dash::IntValue* request, ::dash::StatusResponse* response) { return this->UpdateDashIntData(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDashIntData(
        ::grpc::experimental::MessageAllocator< ::dash::IntValue, ::dash::StatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dash::IntValue, ::dash::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateDashIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashIntData(::grpc::ServerContext* /*context*/, const ::dash::IntValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateDashIntData(
      ::grpc::CallbackServerContext* /*context*/, const ::dash::IntValue* /*request*/, ::dash::StatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateDashIntData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dash::IntValue* /*request*/, ::dash::StatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateDashFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateDashFloatData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dash::FloatValue, ::dash::StatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dash::FloatValue* request, ::dash::StatusResponse* response) { return this->UpdateDashFloatData(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDashFloatData(
        ::grpc::experimental::MessageAllocator< ::dash::FloatValue, ::dash::StatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dash::FloatValue, ::dash::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateDashFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashFloatData(::grpc::ServerContext* /*context*/, const ::dash::FloatValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateDashFloatData(
      ::grpc::CallbackServerContext* /*context*/, const ::dash::FloatValue* /*request*/, ::dash::StatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateDashFloatData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dash::FloatValue* /*request*/, ::dash::StatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateDashStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateDashStringData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dash::StringValue, ::dash::StatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dash::StringValue* request, ::dash::StatusResponse* response) { return this->UpdateDashStringData(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDashStringData(
        ::grpc::experimental::MessageAllocator< ::dash::StringValue, ::dash::StatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dash::StringValue, ::dash::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateDashStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashStringData(::grpc::ServerContext* /*context*/, const ::dash::StringValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateDashStringData(
      ::grpc::CallbackServerContext* /*context*/, const ::dash::StringValue* /*request*/, ::dash::StatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateDashStringData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dash::StringValue* /*request*/, ::dash::StatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateDashBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateDashBytesData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dash::BytesValue, ::dash::StatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dash::BytesValue* request, ::dash::StatusResponse* response) { return this->UpdateDashBytesData(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDashBytesData(
        ::grpc::experimental::MessageAllocator< ::dash::BytesValue, ::dash::StatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dash::BytesValue, ::dash::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateDashBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashBytesData(::grpc::ServerContext* /*context*/, const ::dash::BytesValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateDashBytesData(
      ::grpc::CallbackServerContext* /*context*/, const ::dash::BytesValue* /*request*/, ::dash::StatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateDashBytesData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dash::BytesValue* /*request*/, ::dash::StatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_UpdateDashIntData<ExperimentalWithCallbackMethod_UpdateDashFloatData<ExperimentalWithCallbackMethod_UpdateDashStringData<ExperimentalWithCallbackMethod_UpdateDashBytesData<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_UpdateDashIntData<ExperimentalWithCallbackMethod_UpdateDashFloatData<ExperimentalWithCallbackMethod_UpdateDashStringData<ExperimentalWithCallbackMethod_UpdateDashBytesData<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UpdateDashIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDashIntData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UpdateDashIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashIntData(::grpc::ServerContext* /*context*/, const ::dash::IntValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDashFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDashFloatData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateDashFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashFloatData(::grpc::ServerContext* /*context*/, const ::dash::FloatValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDashStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDashStringData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateDashStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashStringData(::grpc::ServerContext* /*context*/, const ::dash::StringValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDashBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDashBytesData() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateDashBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashBytesData(::grpc::ServerContext* /*context*/, const ::dash::BytesValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDashIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDashIntData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UpdateDashIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashIntData(::grpc::ServerContext* /*context*/, const ::dash::IntValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDashIntData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDashFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDashFloatData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateDashFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashFloatData(::grpc::ServerContext* /*context*/, const ::dash::FloatValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDashFloatData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDashStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDashStringData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateDashStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashStringData(::grpc::ServerContext* /*context*/, const ::dash::StringValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDashStringData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDashBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDashBytesData() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateDashBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashBytesData(::grpc::ServerContext* /*context*/, const ::dash::BytesValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDashBytesData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateDashIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateDashIntData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDashIntData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateDashIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashIntData(::grpc::ServerContext* /*context*/, const ::dash::IntValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateDashIntData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateDashIntData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateDashFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateDashFloatData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDashFloatData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateDashFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashFloatData(::grpc::ServerContext* /*context*/, const ::dash::FloatValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateDashFloatData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateDashFloatData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateDashStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateDashStringData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDashStringData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateDashStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashStringData(::grpc::ServerContext* /*context*/, const ::dash::StringValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateDashStringData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateDashStringData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateDashBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateDashBytesData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDashBytesData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateDashBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashBytesData(::grpc::ServerContext* /*context*/, const ::dash::BytesValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateDashBytesData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateDashBytesData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDashIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDashIntData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::dash::IntValue, ::dash::StatusResponse>(std::bind(&WithStreamedUnaryMethod_UpdateDashIntData<BaseClass>::StreamedUpdateDashIntData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateDashIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDashIntData(::grpc::ServerContext* /*context*/, const ::dash::IntValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDashIntData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dash::IntValue,::dash::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDashFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDashFloatData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::dash::FloatValue, ::dash::StatusResponse>(std::bind(&WithStreamedUnaryMethod_UpdateDashFloatData<BaseClass>::StreamedUpdateDashFloatData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateDashFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDashFloatData(::grpc::ServerContext* /*context*/, const ::dash::FloatValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDashFloatData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dash::FloatValue,::dash::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDashStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDashStringData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::dash::StringValue, ::dash::StatusResponse>(std::bind(&WithStreamedUnaryMethod_UpdateDashStringData<BaseClass>::StreamedUpdateDashStringData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateDashStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDashStringData(::grpc::ServerContext* /*context*/, const ::dash::StringValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDashStringData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dash::StringValue,::dash::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDashBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDashBytesData() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::dash::BytesValue, ::dash::StatusResponse>(std::bind(&WithStreamedUnaryMethod_UpdateDashBytesData<BaseClass>::StreamedUpdateDashBytesData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateDashBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDashBytesData(::grpc::ServerContext* /*context*/, const ::dash::BytesValue* /*request*/, ::dash::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDashBytesData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dash::BytesValue,::dash::StatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UpdateDashIntData<WithStreamedUnaryMethod_UpdateDashFloatData<WithStreamedUnaryMethod_UpdateDashStringData<WithStreamedUnaryMethod_UpdateDashBytesData<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UpdateDashIntData<WithStreamedUnaryMethod_UpdateDashFloatData<WithStreamedUnaryMethod_UpdateDashStringData<WithStreamedUnaryMethod_UpdateDashBytesData<Service > > > > StreamedService;
};

}  // namespace dash


#endif  // GRPC_dash_2eproto__INCLUDED
