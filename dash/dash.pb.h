// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dash.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dash_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dash_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dash_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dash_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dash_2eproto;
namespace dash {
class DashData;
class DashDataDefaultTypeInternal;
extern DashDataDefaultTypeInternal _DashData_default_instance_;
class DashExtendedData;
class DashExtendedDataDefaultTypeInternal;
extern DashExtendedDataDefaultTypeInternal _DashExtendedData_default_instance_;
class DashStatusResponse;
class DashStatusResponseDefaultTypeInternal;
extern DashStatusResponseDefaultTypeInternal _DashStatusResponse_default_instance_;
}  // namespace dash
PROTOBUF_NAMESPACE_OPEN
template<> ::dash::DashData* Arena::CreateMaybeMessage<::dash::DashData>(Arena*);
template<> ::dash::DashExtendedData* Arena::CreateMaybeMessage<::dash::DashExtendedData>(Arena*);
template<> ::dash::DashStatusResponse* Arena::CreateMaybeMessage<::dash::DashStatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dash {

// ===================================================================

class DashData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dash.DashData) */ {
 public:
  DashData();
  virtual ~DashData();

  DashData(const DashData& from);
  DashData(DashData&& from) noexcept
    : DashData() {
    *this = ::std::move(from);
  }

  inline DashData& operator=(const DashData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DashData& operator=(DashData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DashData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DashData* internal_default_instance() {
    return reinterpret_cast<const DashData*>(
               &_DashData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DashData& a, DashData& b) {
    a.Swap(&b);
  }
  inline void Swap(DashData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DashData* New() const final {
    return CreateMaybeMessage<DashData>(nullptr);
  }

  DashData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DashData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DashData& from);
  void MergeFrom(const DashData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DashData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dash.DashData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dash_2eproto);
    return ::descriptor_table_dash_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 1,
    kRpmFieldNumber = 2,
    kGearFieldNumber = 3,
    kNeutralFieldNumber = 4,
    kClutchFieldNumber = 5,
    kEngineRunningFieldNumber = 6,
  };
  // float speed = 1;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // int32 rpm = 2;
  void clear_rpm();
  ::PROTOBUF_NAMESPACE_ID::int32 rpm() const;
  void set_rpm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rpm() const;
  void _internal_set_rpm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gear = 3;
  void clear_gear();
  ::PROTOBUF_NAMESPACE_ID::int32 gear() const;
  void set_gear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gear() const;
  void _internal_set_gear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool neutral = 4;
  void clear_neutral();
  bool neutral() const;
  void set_neutral(bool value);
  private:
  bool _internal_neutral() const;
  void _internal_set_neutral(bool value);
  public:

  // bool clutch = 5;
  void clear_clutch();
  bool clutch() const;
  void set_clutch(bool value);
  private:
  bool _internal_clutch() const;
  void _internal_set_clutch(bool value);
  public:

  // bool engineRunning = 6;
  void clear_enginerunning();
  bool enginerunning() const;
  void set_enginerunning(bool value);
  private:
  bool _internal_enginerunning() const;
  void _internal_set_enginerunning(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dash.DashData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 rpm_;
  ::PROTOBUF_NAMESPACE_ID::int32 gear_;
  bool neutral_;
  bool clutch_;
  bool enginerunning_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dash_2eproto;
};
// -------------------------------------------------------------------

class DashExtendedData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dash.DashExtendedData) */ {
 public:
  DashExtendedData();
  virtual ~DashExtendedData();

  DashExtendedData(const DashExtendedData& from);
  DashExtendedData(DashExtendedData&& from) noexcept
    : DashExtendedData() {
    *this = ::std::move(from);
  }

  inline DashExtendedData& operator=(const DashExtendedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DashExtendedData& operator=(DashExtendedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DashExtendedData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DashExtendedData* internal_default_instance() {
    return reinterpret_cast<const DashExtendedData*>(
               &_DashExtendedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DashExtendedData& a, DashExtendedData& b) {
    a.Swap(&b);
  }
  inline void Swap(DashExtendedData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DashExtendedData* New() const final {
    return CreateMaybeMessage<DashExtendedData>(nullptr);
  }

  DashExtendedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DashExtendedData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DashExtendedData& from);
  void MergeFrom(const DashExtendedData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DashExtendedData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dash.DashExtendedData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dash_2eproto);
    return ::descriptor_table_dash_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryVoltageFieldNumber = 1,
    kCoolantTemperatureFieldNumber = 2,
    kAirIntakeTemperatureFieldNumber = 3,
    kManifoldPressureFieldNumber = 4,
    kThrottlePositionSensorFieldNumber = 5,
    kInjectorDurationFieldNumber = 6,
    kIgnitionAdvanceFieldNumber = 7,
    kKickstandFieldNumber = 8,
  };
  // float batteryVoltage = 1;
  void clear_batteryvoltage();
  float batteryvoltage() const;
  void set_batteryvoltage(float value);
  private:
  float _internal_batteryvoltage() const;
  void _internal_set_batteryvoltage(float value);
  public:

  // float coolantTemperature = 2;
  void clear_coolanttemperature();
  float coolanttemperature() const;
  void set_coolanttemperature(float value);
  private:
  float _internal_coolanttemperature() const;
  void _internal_set_coolanttemperature(float value);
  public:

  // float airIntakeTemperature = 3;
  void clear_airintaketemperature();
  float airintaketemperature() const;
  void set_airintaketemperature(float value);
  private:
  float _internal_airintaketemperature() const;
  void _internal_set_airintaketemperature(float value);
  public:

  // float manifoldPressure = 4;
  void clear_manifoldpressure();
  float manifoldpressure() const;
  void set_manifoldpressure(float value);
  private:
  float _internal_manifoldpressure() const;
  void _internal_set_manifoldpressure(float value);
  public:

  // float throttlePositionSensor = 5;
  void clear_throttlepositionsensor();
  float throttlepositionsensor() const;
  void set_throttlepositionsensor(float value);
  private:
  float _internal_throttlepositionsensor() const;
  void _internal_set_throttlepositionsensor(float value);
  public:

  // float injectorDuration = 6;
  void clear_injectorduration();
  float injectorduration() const;
  void set_injectorduration(float value);
  private:
  float _internal_injectorduration() const;
  void _internal_set_injectorduration(float value);
  public:

  // float ignitionAdvance = 7;
  void clear_ignitionadvance();
  float ignitionadvance() const;
  void set_ignitionadvance(float value);
  private:
  float _internal_ignitionadvance() const;
  void _internal_set_ignitionadvance(float value);
  public:

  // bool kickstand = 8;
  void clear_kickstand();
  bool kickstand() const;
  void set_kickstand(bool value);
  private:
  bool _internal_kickstand() const;
  void _internal_set_kickstand(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dash.DashExtendedData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float batteryvoltage_;
  float coolanttemperature_;
  float airintaketemperature_;
  float manifoldpressure_;
  float throttlepositionsensor_;
  float injectorduration_;
  float ignitionadvance_;
  bool kickstand_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dash_2eproto;
};
// -------------------------------------------------------------------

class DashStatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dash.DashStatusResponse) */ {
 public:
  DashStatusResponse();
  virtual ~DashStatusResponse();

  DashStatusResponse(const DashStatusResponse& from);
  DashStatusResponse(DashStatusResponse&& from) noexcept
    : DashStatusResponse() {
    *this = ::std::move(from);
  }

  inline DashStatusResponse& operator=(const DashStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DashStatusResponse& operator=(DashStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DashStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DashStatusResponse* internal_default_instance() {
    return reinterpret_cast<const DashStatusResponse*>(
               &_DashStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DashStatusResponse& a, DashStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DashStatusResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DashStatusResponse* New() const final {
    return CreateMaybeMessage<DashStatusResponse>(nullptr);
  }

  DashStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DashStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DashStatusResponse& from);
  void MergeFrom(const DashStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DashStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dash.DashStatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dash_2eproto);
    return ::descriptor_table_dash_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dash.DashStatusResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dash_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DashData

// float speed = 1;
inline void DashData::clear_speed() {
  speed_ = 0;
}
inline float DashData::_internal_speed() const {
  return speed_;
}
inline float DashData::speed() const {
  // @@protoc_insertion_point(field_get:dash.DashData.speed)
  return _internal_speed();
}
inline void DashData::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void DashData::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:dash.DashData.speed)
}

// int32 rpm = 2;
inline void DashData::clear_rpm() {
  rpm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DashData::_internal_rpm() const {
  return rpm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DashData::rpm() const {
  // @@protoc_insertion_point(field_get:dash.DashData.rpm)
  return _internal_rpm();
}
inline void DashData::_internal_set_rpm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rpm_ = value;
}
inline void DashData::set_rpm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rpm(value);
  // @@protoc_insertion_point(field_set:dash.DashData.rpm)
}

// int32 gear = 3;
inline void DashData::clear_gear() {
  gear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DashData::_internal_gear() const {
  return gear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DashData::gear() const {
  // @@protoc_insertion_point(field_get:dash.DashData.gear)
  return _internal_gear();
}
inline void DashData::_internal_set_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gear_ = value;
}
inline void DashData::set_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:dash.DashData.gear)
}

// bool neutral = 4;
inline void DashData::clear_neutral() {
  neutral_ = false;
}
inline bool DashData::_internal_neutral() const {
  return neutral_;
}
inline bool DashData::neutral() const {
  // @@protoc_insertion_point(field_get:dash.DashData.neutral)
  return _internal_neutral();
}
inline void DashData::_internal_set_neutral(bool value) {
  
  neutral_ = value;
}
inline void DashData::set_neutral(bool value) {
  _internal_set_neutral(value);
  // @@protoc_insertion_point(field_set:dash.DashData.neutral)
}

// bool clutch = 5;
inline void DashData::clear_clutch() {
  clutch_ = false;
}
inline bool DashData::_internal_clutch() const {
  return clutch_;
}
inline bool DashData::clutch() const {
  // @@protoc_insertion_point(field_get:dash.DashData.clutch)
  return _internal_clutch();
}
inline void DashData::_internal_set_clutch(bool value) {
  
  clutch_ = value;
}
inline void DashData::set_clutch(bool value) {
  _internal_set_clutch(value);
  // @@protoc_insertion_point(field_set:dash.DashData.clutch)
}

// bool engineRunning = 6;
inline void DashData::clear_enginerunning() {
  enginerunning_ = false;
}
inline bool DashData::_internal_enginerunning() const {
  return enginerunning_;
}
inline bool DashData::enginerunning() const {
  // @@protoc_insertion_point(field_get:dash.DashData.engineRunning)
  return _internal_enginerunning();
}
inline void DashData::_internal_set_enginerunning(bool value) {
  
  enginerunning_ = value;
}
inline void DashData::set_enginerunning(bool value) {
  _internal_set_enginerunning(value);
  // @@protoc_insertion_point(field_set:dash.DashData.engineRunning)
}

// -------------------------------------------------------------------

// DashExtendedData

// float batteryVoltage = 1;
inline void DashExtendedData::clear_batteryvoltage() {
  batteryvoltage_ = 0;
}
inline float DashExtendedData::_internal_batteryvoltage() const {
  return batteryvoltage_;
}
inline float DashExtendedData::batteryvoltage() const {
  // @@protoc_insertion_point(field_get:dash.DashExtendedData.batteryVoltage)
  return _internal_batteryvoltage();
}
inline void DashExtendedData::_internal_set_batteryvoltage(float value) {
  
  batteryvoltage_ = value;
}
inline void DashExtendedData::set_batteryvoltage(float value) {
  _internal_set_batteryvoltage(value);
  // @@protoc_insertion_point(field_set:dash.DashExtendedData.batteryVoltage)
}

// float coolantTemperature = 2;
inline void DashExtendedData::clear_coolanttemperature() {
  coolanttemperature_ = 0;
}
inline float DashExtendedData::_internal_coolanttemperature() const {
  return coolanttemperature_;
}
inline float DashExtendedData::coolanttemperature() const {
  // @@protoc_insertion_point(field_get:dash.DashExtendedData.coolantTemperature)
  return _internal_coolanttemperature();
}
inline void DashExtendedData::_internal_set_coolanttemperature(float value) {
  
  coolanttemperature_ = value;
}
inline void DashExtendedData::set_coolanttemperature(float value) {
  _internal_set_coolanttemperature(value);
  // @@protoc_insertion_point(field_set:dash.DashExtendedData.coolantTemperature)
}

// float airIntakeTemperature = 3;
inline void DashExtendedData::clear_airintaketemperature() {
  airintaketemperature_ = 0;
}
inline float DashExtendedData::_internal_airintaketemperature() const {
  return airintaketemperature_;
}
inline float DashExtendedData::airintaketemperature() const {
  // @@protoc_insertion_point(field_get:dash.DashExtendedData.airIntakeTemperature)
  return _internal_airintaketemperature();
}
inline void DashExtendedData::_internal_set_airintaketemperature(float value) {
  
  airintaketemperature_ = value;
}
inline void DashExtendedData::set_airintaketemperature(float value) {
  _internal_set_airintaketemperature(value);
  // @@protoc_insertion_point(field_set:dash.DashExtendedData.airIntakeTemperature)
}

// float manifoldPressure = 4;
inline void DashExtendedData::clear_manifoldpressure() {
  manifoldpressure_ = 0;
}
inline float DashExtendedData::_internal_manifoldpressure() const {
  return manifoldpressure_;
}
inline float DashExtendedData::manifoldpressure() const {
  // @@protoc_insertion_point(field_get:dash.DashExtendedData.manifoldPressure)
  return _internal_manifoldpressure();
}
inline void DashExtendedData::_internal_set_manifoldpressure(float value) {
  
  manifoldpressure_ = value;
}
inline void DashExtendedData::set_manifoldpressure(float value) {
  _internal_set_manifoldpressure(value);
  // @@protoc_insertion_point(field_set:dash.DashExtendedData.manifoldPressure)
}

// float throttlePositionSensor = 5;
inline void DashExtendedData::clear_throttlepositionsensor() {
  throttlepositionsensor_ = 0;
}
inline float DashExtendedData::_internal_throttlepositionsensor() const {
  return throttlepositionsensor_;
}
inline float DashExtendedData::throttlepositionsensor() const {
  // @@protoc_insertion_point(field_get:dash.DashExtendedData.throttlePositionSensor)
  return _internal_throttlepositionsensor();
}
inline void DashExtendedData::_internal_set_throttlepositionsensor(float value) {
  
  throttlepositionsensor_ = value;
}
inline void DashExtendedData::set_throttlepositionsensor(float value) {
  _internal_set_throttlepositionsensor(value);
  // @@protoc_insertion_point(field_set:dash.DashExtendedData.throttlePositionSensor)
}

// float injectorDuration = 6;
inline void DashExtendedData::clear_injectorduration() {
  injectorduration_ = 0;
}
inline float DashExtendedData::_internal_injectorduration() const {
  return injectorduration_;
}
inline float DashExtendedData::injectorduration() const {
  // @@protoc_insertion_point(field_get:dash.DashExtendedData.injectorDuration)
  return _internal_injectorduration();
}
inline void DashExtendedData::_internal_set_injectorduration(float value) {
  
  injectorduration_ = value;
}
inline void DashExtendedData::set_injectorduration(float value) {
  _internal_set_injectorduration(value);
  // @@protoc_insertion_point(field_set:dash.DashExtendedData.injectorDuration)
}

// float ignitionAdvance = 7;
inline void DashExtendedData::clear_ignitionadvance() {
  ignitionadvance_ = 0;
}
inline float DashExtendedData::_internal_ignitionadvance() const {
  return ignitionadvance_;
}
inline float DashExtendedData::ignitionadvance() const {
  // @@protoc_insertion_point(field_get:dash.DashExtendedData.ignitionAdvance)
  return _internal_ignitionadvance();
}
inline void DashExtendedData::_internal_set_ignitionadvance(float value) {
  
  ignitionadvance_ = value;
}
inline void DashExtendedData::set_ignitionadvance(float value) {
  _internal_set_ignitionadvance(value);
  // @@protoc_insertion_point(field_set:dash.DashExtendedData.ignitionAdvance)
}

// bool kickstand = 8;
inline void DashExtendedData::clear_kickstand() {
  kickstand_ = false;
}
inline bool DashExtendedData::_internal_kickstand() const {
  return kickstand_;
}
inline bool DashExtendedData::kickstand() const {
  // @@protoc_insertion_point(field_get:dash.DashExtendedData.kickstand)
  return _internal_kickstand();
}
inline void DashExtendedData::_internal_set_kickstand(bool value) {
  
  kickstand_ = value;
}
inline void DashExtendedData::set_kickstand(bool value) {
  _internal_set_kickstand(value);
  // @@protoc_insertion_point(field_set:dash.DashExtendedData.kickstand)
}

// -------------------------------------------------------------------

// DashStatusResponse

// int32 status = 1;
inline void DashStatusResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DashStatusResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DashStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:dash.DashStatusResponse.status)
  return _internal_status();
}
inline void DashStatusResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void DashStatusResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dash.DashStatusResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dash

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dash_2eproto
