// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_media_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_media_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_media_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_media_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_media_2eproto;
namespace mediaplayer {
class MediaItem;
class MediaItemDefaultTypeInternal;
extern MediaItemDefaultTypeInternal _MediaItem_default_instance_;
class PlayStatus;
class PlayStatusDefaultTypeInternal;
extern PlayStatusDefaultTypeInternal _PlayStatus_default_instance_;
class StatusResponse;
class StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
}  // namespace mediaplayer
PROTOBUF_NAMESPACE_OPEN
template<> ::mediaplayer::MediaItem* Arena::CreateMaybeMessage<::mediaplayer::MediaItem>(Arena*);
template<> ::mediaplayer::PlayStatus* Arena::CreateMaybeMessage<::mediaplayer::PlayStatus>(Arena*);
template<> ::mediaplayer::StatusResponse* Arena::CreateMaybeMessage<::mediaplayer::StatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediaplayer {

// ===================================================================

class PlayStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediaplayer.PlayStatus) */ {
 public:
  PlayStatus();
  virtual ~PlayStatus();

  PlayStatus(const PlayStatus& from);
  PlayStatus(PlayStatus&& from) noexcept
    : PlayStatus() {
    *this = ::std::move(from);
  }

  inline PlayStatus& operator=(const PlayStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayStatus& operator=(PlayStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayStatus* internal_default_instance() {
    return reinterpret_cast<const PlayStatus*>(
               &_PlayStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayStatus& a, PlayStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayStatus* New() const final {
    return CreateMaybeMessage<PlayStatus>(nullptr);
  }

  PlayStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayStatus& from);
  void MergeFrom(const PlayStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediaplayer.PlayStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2eproto);
    return ::descriptor_table_media_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayStatusFieldNumber = 1,
  };
  // string playStatus = 1;
  void clear_playstatus();
  const std::string& playstatus() const;
  void set_playstatus(const std::string& value);
  void set_playstatus(std::string&& value);
  void set_playstatus(const char* value);
  void set_playstatus(const char* value, size_t size);
  std::string* mutable_playstatus();
  std::string* release_playstatus();
  void set_allocated_playstatus(std::string* playstatus);
  private:
  const std::string& _internal_playstatus() const;
  void _internal_set_playstatus(const std::string& value);
  std::string* _internal_mutable_playstatus();
  public:

  // @@protoc_insertion_point(class_scope:mediaplayer.PlayStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class MediaItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediaplayer.MediaItem) */ {
 public:
  MediaItem();
  virtual ~MediaItem();

  MediaItem(const MediaItem& from);
  MediaItem(MediaItem&& from) noexcept
    : MediaItem() {
    *this = ::std::move(from);
  }

  inline MediaItem& operator=(const MediaItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaItem& operator=(MediaItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaItem* internal_default_instance() {
    return reinterpret_cast<const MediaItem*>(
               &_MediaItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MediaItem& a, MediaItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaItem* New() const final {
    return CreateMaybeMessage<MediaItem>(nullptr);
  }

  MediaItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaItem& from);
  void MergeFrom(const MediaItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediaplayer.MediaItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2eproto);
    return ::descriptor_table_media_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kArtistFieldNumber = 2,
    kAlbumFieldNumber = 3,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string artist = 2;
  void clear_artist();
  const std::string& artist() const;
  void set_artist(const std::string& value);
  void set_artist(std::string&& value);
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  std::string* mutable_artist();
  std::string* release_artist();
  void set_allocated_artist(std::string* artist);
  private:
  const std::string& _internal_artist() const;
  void _internal_set_artist(const std::string& value);
  std::string* _internal_mutable_artist();
  public:

  // string album = 3;
  void clear_album();
  const std::string& album() const;
  void set_album(const std::string& value);
  void set_album(std::string&& value);
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  std::string* mutable_album();
  std::string* release_album();
  void set_allocated_album(std::string* album);
  private:
  const std::string& _internal_album() const;
  void _internal_set_album(const std::string& value);
  std::string* _internal_mutable_album();
  public:

  // @@protoc_insertion_point(class_scope:mediaplayer.MediaItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr artist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr album_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediaplayer.StatusResponse) */ {
 public:
  StatusResponse();
  virtual ~StatusResponse();

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusResponse* New() const final {
    return CreateMaybeMessage<StatusResponse>(nullptr);
  }

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediaplayer.StatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2eproto);
    return ::descriptor_table_media_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediaplayer.StatusResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayStatus

// string playStatus = 1;
inline void PlayStatus::clear_playstatus() {
  playstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayStatus::playstatus() const {
  // @@protoc_insertion_point(field_get:mediaplayer.PlayStatus.playStatus)
  return _internal_playstatus();
}
inline void PlayStatus::set_playstatus(const std::string& value) {
  _internal_set_playstatus(value);
  // @@protoc_insertion_point(field_set:mediaplayer.PlayStatus.playStatus)
}
inline std::string* PlayStatus::mutable_playstatus() {
  // @@protoc_insertion_point(field_mutable:mediaplayer.PlayStatus.playStatus)
  return _internal_mutable_playstatus();
}
inline const std::string& PlayStatus::_internal_playstatus() const {
  return playstatus_.GetNoArena();
}
inline void PlayStatus::_internal_set_playstatus(const std::string& value) {
  
  playstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayStatus::set_playstatus(std::string&& value) {
  
  playstatus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mediaplayer.PlayStatus.playStatus)
}
inline void PlayStatus::set_playstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mediaplayer.PlayStatus.playStatus)
}
inline void PlayStatus::set_playstatus(const char* value, size_t size) {
  
  playstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mediaplayer.PlayStatus.playStatus)
}
inline std::string* PlayStatus::_internal_mutable_playstatus() {
  
  return playstatus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayStatus::release_playstatus() {
  // @@protoc_insertion_point(field_release:mediaplayer.PlayStatus.playStatus)
  
  return playstatus_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayStatus::set_allocated_playstatus(std::string* playstatus) {
  if (playstatus != nullptr) {
    
  } else {
    
  }
  playstatus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playstatus);
  // @@protoc_insertion_point(field_set_allocated:mediaplayer.PlayStatus.playStatus)
}

// -------------------------------------------------------------------

// MediaItem

// string title = 1;
inline void MediaItem::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MediaItem::title() const {
  // @@protoc_insertion_point(field_get:mediaplayer.MediaItem.title)
  return _internal_title();
}
inline void MediaItem::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:mediaplayer.MediaItem.title)
}
inline std::string* MediaItem::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mediaplayer.MediaItem.title)
  return _internal_mutable_title();
}
inline const std::string& MediaItem::_internal_title() const {
  return title_.GetNoArena();
}
inline void MediaItem::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaItem::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mediaplayer.MediaItem.title)
}
inline void MediaItem::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mediaplayer.MediaItem.title)
}
inline void MediaItem::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mediaplayer.MediaItem.title)
}
inline std::string* MediaItem::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaItem::release_title() {
  // @@protoc_insertion_point(field_release:mediaplayer.MediaItem.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaItem::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:mediaplayer.MediaItem.title)
}

// string artist = 2;
inline void MediaItem::clear_artist() {
  artist_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MediaItem::artist() const {
  // @@protoc_insertion_point(field_get:mediaplayer.MediaItem.artist)
  return _internal_artist();
}
inline void MediaItem::set_artist(const std::string& value) {
  _internal_set_artist(value);
  // @@protoc_insertion_point(field_set:mediaplayer.MediaItem.artist)
}
inline std::string* MediaItem::mutable_artist() {
  // @@protoc_insertion_point(field_mutable:mediaplayer.MediaItem.artist)
  return _internal_mutable_artist();
}
inline const std::string& MediaItem::_internal_artist() const {
  return artist_.GetNoArena();
}
inline void MediaItem::_internal_set_artist(const std::string& value) {
  
  artist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaItem::set_artist(std::string&& value) {
  
  artist_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mediaplayer.MediaItem.artist)
}
inline void MediaItem::set_artist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  artist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mediaplayer.MediaItem.artist)
}
inline void MediaItem::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mediaplayer.MediaItem.artist)
}
inline std::string* MediaItem::_internal_mutable_artist() {
  
  return artist_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaItem::release_artist() {
  // @@protoc_insertion_point(field_release:mediaplayer.MediaItem.artist)
  
  return artist_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaItem::set_allocated_artist(std::string* artist) {
  if (artist != nullptr) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:mediaplayer.MediaItem.artist)
}

// string album = 3;
inline void MediaItem::clear_album() {
  album_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MediaItem::album() const {
  // @@protoc_insertion_point(field_get:mediaplayer.MediaItem.album)
  return _internal_album();
}
inline void MediaItem::set_album(const std::string& value) {
  _internal_set_album(value);
  // @@protoc_insertion_point(field_set:mediaplayer.MediaItem.album)
}
inline std::string* MediaItem::mutable_album() {
  // @@protoc_insertion_point(field_mutable:mediaplayer.MediaItem.album)
  return _internal_mutable_album();
}
inline const std::string& MediaItem::_internal_album() const {
  return album_.GetNoArena();
}
inline void MediaItem::_internal_set_album(const std::string& value) {
  
  album_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaItem::set_album(std::string&& value) {
  
  album_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mediaplayer.MediaItem.album)
}
inline void MediaItem::set_album(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  album_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mediaplayer.MediaItem.album)
}
inline void MediaItem::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mediaplayer.MediaItem.album)
}
inline std::string* MediaItem::_internal_mutable_album() {
  
  return album_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaItem::release_album() {
  // @@protoc_insertion_point(field_release:mediaplayer.MediaItem.album)
  
  return album_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaItem::set_allocated_album(std::string* album) {
  if (album != nullptr) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:mediaplayer.MediaItem.album)
}

// -------------------------------------------------------------------

// StatusResponse

// int32 status = 1;
inline void StatusResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusResponse::status() const {
  // @@protoc_insertion_point(field_get:mediaplayer.StatusResponse.status)
  return _internal_status();
}
inline void StatusResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void StatusResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mediaplayer.StatusResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediaplayer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_media_2eproto
