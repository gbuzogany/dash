// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: media.proto
#ifndef GRPC_media_2eproto__INCLUDED
#define GRPC_media_2eproto__INCLUDED

#include "media.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace mediaplayer {

class MediaPlayer final {
 public:
  static constexpr char const* service_full_name() {
    return "mediaplayer.MediaPlayer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PlayStatusChanged(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::mediaplayer::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>> AsyncPlayStatusChanged(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>>(AsyncPlayStatusChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>> PrepareAsyncPlayStatusChanged(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>>(PrepareAsyncPlayStatusChangedRaw(context, request, cq));
    }
    virtual ::grpc::Status MediaChanged(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::mediaplayer::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>> AsyncMediaChanged(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>>(AsyncMediaChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>> PrepareAsyncMediaChanged(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>>(PrepareAsyncMediaChangedRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void PlayStatusChanged(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PlayStatusChanged(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MediaChanged(::grpc::ClientContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MediaChanged(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>* AsyncPlayStatusChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>* PrepareAsyncPlayStatusChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>* AsyncMediaChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mediaplayer::StatusResponse>* PrepareAsyncMediaChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PlayStatusChanged(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::mediaplayer::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>> AsyncPlayStatusChanged(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>>(AsyncPlayStatusChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>> PrepareAsyncPlayStatusChanged(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>>(PrepareAsyncPlayStatusChangedRaw(context, request, cq));
    }
    ::grpc::Status MediaChanged(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::mediaplayer::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>> AsyncMediaChanged(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>>(AsyncMediaChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>> PrepareAsyncMediaChanged(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>>(PrepareAsyncMediaChangedRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void PlayStatusChanged(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void PlayStatusChanged(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void MediaChanged(::grpc::ClientContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void MediaChanged(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mediaplayer::StatusResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>* AsyncPlayStatusChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>* PrepareAsyncPlayStatusChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::PlayStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>* AsyncMediaChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mediaplayer::StatusResponse>* PrepareAsyncMediaChangedRaw(::grpc::ClientContext* context, const ::mediaplayer::MediaItem& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PlayStatusChanged_;
    const ::grpc::internal::RpcMethod rpcmethod_MediaChanged_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PlayStatusChanged(::grpc::ServerContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response);
    virtual ::grpc::Status MediaChanged(::grpc::ServerContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PlayStatusChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PlayStatusChanged() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PlayStatusChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayStatusChanged(::grpc::ServerContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayStatusChanged(::grpc::ServerContext* context, ::mediaplayer::PlayStatus* request, ::grpc::ServerAsyncResponseWriter< ::mediaplayer::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MediaChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MediaChanged() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MediaChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaChanged(::grpc::ServerContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaChanged(::grpc::ServerContext* context, ::mediaplayer::MediaItem* request, ::grpc::ServerAsyncResponseWriter< ::mediaplayer::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PlayStatusChanged<WithAsyncMethod_MediaChanged<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PlayStatusChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PlayStatusChanged() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::mediaplayer::PlayStatus, ::mediaplayer::StatusResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mediaplayer::PlayStatus* request,
                 ::mediaplayer::StatusResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PlayStatusChanged(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PlayStatusChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayStatusChanged(::grpc::ServerContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PlayStatusChanged(::grpc::ServerContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MediaChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_MediaChanged() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::mediaplayer::MediaItem, ::mediaplayer::StatusResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mediaplayer::MediaItem* request,
                 ::mediaplayer::StatusResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->MediaChanged(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_MediaChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaChanged(::grpc::ServerContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void MediaChanged(::grpc::ServerContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_PlayStatusChanged<ExperimentalWithCallbackMethod_MediaChanged<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PlayStatusChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PlayStatusChanged() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PlayStatusChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayStatusChanged(::grpc::ServerContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MediaChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MediaChanged() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MediaChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaChanged(::grpc::ServerContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PlayStatusChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PlayStatusChanged() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PlayStatusChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayStatusChanged(::grpc::ServerContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayStatusChanged(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MediaChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_MediaChanged() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_MediaChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaChanged(::grpc::ServerContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaChanged(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PlayStatusChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PlayStatusChanged() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PlayStatusChanged(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PlayStatusChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayStatusChanged(::grpc::ServerContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PlayStatusChanged(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MediaChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_MediaChanged() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->MediaChanged(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_MediaChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaChanged(::grpc::ServerContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void MediaChanged(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PlayStatusChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PlayStatusChanged() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mediaplayer::PlayStatus, ::mediaplayer::StatusResponse>(std::bind(&WithStreamedUnaryMethod_PlayStatusChanged<BaseClass>::StreamedPlayStatusChanged, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PlayStatusChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PlayStatusChanged(::grpc::ServerContext* context, const ::mediaplayer::PlayStatus* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlayStatusChanged(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mediaplayer::PlayStatus,::mediaplayer::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MediaChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MediaChanged() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mediaplayer::MediaItem, ::mediaplayer::StatusResponse>(std::bind(&WithStreamedUnaryMethod_MediaChanged<BaseClass>::StreamedMediaChanged, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MediaChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MediaChanged(::grpc::ServerContext* context, const ::mediaplayer::MediaItem* request, ::mediaplayer::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMediaChanged(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mediaplayer::MediaItem,::mediaplayer::StatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PlayStatusChanged<WithStreamedUnaryMethod_MediaChanged<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PlayStatusChanged<WithStreamedUnaryMethod_MediaChanged<Service > > StreamedService;
};

}  // namespace mediaplayer


#endif  // GRPC_media_2eproto__INCLUDED
